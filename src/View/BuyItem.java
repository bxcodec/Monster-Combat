/*
 *     Name :  Iman Syahputra Situmorang
 *     NIM  :  11113064
 *     Date :  16/December/2014
 
 */
package View;

import Controller.DBManager;
import Model.Account;
import Model.Item;
import Model.Monster;
import Model.MonsterAccount;
import Model.MonsterItem;
import Model.MonsterItemPK;
import Model.TemplateMonsterTable;
import com.mysql.jdbc.exceptions.MySQLIntegrityConstraintViolationException;
import java.applet.Applet;
import java.applet.AudioClip;
import java.awt.Image;
import java.net.URL;
import java.sql.SQLTransactionRollbackException;
import java.util.ArrayList;
import javax.persistence.EntityExistsException;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.eclipse.persistence.exceptions.DatabaseException;

/**
 *
 * @author Takiya
 */
public class BuyItem extends javax.swing.JFrame {

    /**
     * Creates new form BuyItem
     */
    private JFrame previousFrame;
    private DBManager manager;
    private MonsterAccount akunMonster1 = null;
    private Account akun = null;
    private Image image;

    public BuyItem() {

        image = new ImageIcon(getClass().getResource("/Images/Background/LadyDark.jpg")).getImage();
        manager = new DBManager();
        setUndecorated(true);
        initComponents();
        if (clip == null) {
            loadSound();

        } else {
            clip.stop();
            loadSound();
        }

    }

    AudioClip clip = null;

    public void loadSound() {

        URL url = getClass().getResource("/Sound/buy.wav");
        clip = Applet.newAudioClip(url);
//        AudioClip clip2 = Applet.newAudioClip(url);
        clip.play();
        clip.loop();
    }

    public void setMonsterAccount(MonsterAccount akun) {
        this.akunMonster1 = akun;
    }

    public void setAccount(Account akun) {
        this.akun = akun;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void loadDataTableBuyItem() {
        Object[] coloumnNamesBuy = {"Item", "Name", "Tipe", "AP", "DP", "HP", "Price", "ID"};
        ArrayList<Item> itemM = new ArrayList<Item>();

        itemM = manager.loadItem();

        ArrayList<ImageIcon> item1 = new ArrayList<ImageIcon>();

        int numOfItem = itemM.size();

        for (int i = 0; i < numOfItem; i++) {
            ImageIcon icon = new ImageIcon(getClass().getResource("/Images/Item/" + itemM.get(i).getAvatarUrl()));
            item1.add(icon);
        }

        Object data[][] = new Object[numOfItem][8];

        for (int i = 0; i < numOfItem; i++) {
            data[i][0] = item1.get(i);
            data[i][1] = itemM.get(i).getName();
            data[i][2] = itemM.get(i).getKind();
            data[i][3] = itemM.get(i).getAp();
            data[i][4] = itemM.get(i).getDp();
            data[i][5] = itemM.get(i).getHp();
            data[i][6] = itemM.get(i).getPrice();
            data[i][7] = itemM.get(i).getId();
        }

        TemplateMonsterTable dtTable = new TemplateMonsterTable(data, coloumnNamesBuy);

        this.tblBuyItem.setModel(dtTable);
        this.tblBuyItem.removeColumn(tblBuyItem.getColumnModel().getColumn(7));
        this.tblBuyItem.setRowHeight(30);

    }

    public void loadDataTableMonster() {
        Object[] coloumnNames = {"Item", "Name", "AP", "DP", "HP"};
        ArrayList<MonsterItem> itemM = new ArrayList<MonsterItem>();

        itemM = manager.loadItemMonster(akunMonster1.getId());

        ArrayList<ImageIcon> item1 = new ArrayList<ImageIcon>();
        ArrayList<ImageIcon> item2 = new ArrayList<ImageIcon>();

        int numOfItem = itemM.size();

        for (int i = 0; i < numOfItem; i++) {
            ImageIcon icon = new ImageIcon(getClass().getResource("/Images/Item/" + itemM.get(i).getItem().getAvatarUrl()));
            item1.add(icon);
        }

        Object data[][] = new Object[numOfItem][5];

        for (int i = 0; i < numOfItem; i++) {
            data[i][0] = item1.get(i);
            data[i][1] = itemM.get(i).getItem().getName();
            data[i][2] = itemM.get(i).getItem().getAp();
            data[i][3] = itemM.get(i).getItem().getDp();
            data[i][4] = itemM.get(i).getItem().getHp();

        }

        TemplateMonsterTable dtTable = new TemplateMonsterTable(data, coloumnNames);

        this.tblMyItem.setModel(dtTable);

        this.tblMyItem.setRowHeight(30);

    }

    public void loadDataMonster() {

        String ap = new Integer(akunMonster1.getAp()).toString();
        String dp = new Integer(akunMonster1.getDp()).toString();
        String hp = new Integer(akunMonster1.getHp()).toString();
        String level = new Integer(akunMonster1.getLevel()).toString();
        String points = new Integer(akunMonster1.getWinPoint()).toString();
        String coints = new Integer(akunMonster1.getCoin()).toString();

        monsterName.setText(akunMonster1.getAccountId().getUsername());
        Ap.setText(ap);
        Dp.setText(dp);
        Hp.setText(hp);
        Level.setText(level);
        Points.setText(points);
        Coints.setText(coints);
        lblImage.setIcon(new ImageIcon(getClass().getResource("/Images/Monster/" + akunMonster1.getMonsterId().getAvatarUrl())));
    }

    public void setPreviousFrame(JFrame prev) {
        this.previousFrame = prev;
    }

    public JFrame getPreviousFrame() {
        return this.previousFrame;
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        containerBuy = new PanelBackground(image);
        ;
        lblWelcome = new javax.swing.JLabel();
        lblImage = new javax.swing.JLabel();
        monsterName = new javax.swing.JLabel();
        lblHp = new javax.swing.JLabel();
        lblAP = new javax.swing.JLabel();
        lblDp = new javax.swing.JLabel();
        lblPoints = new javax.swing.JLabel();
        lblLevel = new javax.swing.JLabel();
        Ap = new javax.swing.JLabel();
        Dp = new javax.swing.JLabel();
        Hp = new javax.swing.JLabel();
        Points = new javax.swing.JLabel();
        Level = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBuyItem = new javax.swing.JTable();
        back = new javax.swing.JLabel();
        lblMyitem = new javax.swing.JLabel();
        Buy = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMyItem = new javax.swing.JTable();
        lblCoins = new javax.swing.JLabel();
        Coints = new javax.swing.JLabel();
        sound = new javax.swing.JLabel();
        exit = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        containerBuy.setInheritsPopupMenu(true);
        containerBuy.setPreferredSize(new java.awt.Dimension(1366, 768));

        lblWelcome.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblWelcome.setForeground(new java.awt.Color(255, 255, 255));
        lblWelcome.setText("Welcome ");

        lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Monster/Bonbon.png"))); // NOI18N

        monsterName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        monsterName.setForeground(new java.awt.Color(255, 255, 255));
        monsterName.setText("Monster Name");

        lblHp.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblHp.setForeground(new java.awt.Color(255, 102, 0));
        lblHp.setText("HP");

        lblAP.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblAP.setForeground(new java.awt.Color(255, 102, 0));
        lblAP.setText("AP");

        lblDp.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblDp.setForeground(new java.awt.Color(255, 102, 0));
        lblDp.setText("DP");

        lblPoints.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblPoints.setForeground(new java.awt.Color(255, 102, 0));
        lblPoints.setText("Points");

        lblLevel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblLevel.setForeground(new java.awt.Color(255, 102, 0));
        lblLevel.setText("Level");

        Ap.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Ap.setForeground(new java.awt.Color(255, 102, 0));
        Ap.setText("0");

        Dp.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Dp.setForeground(new java.awt.Color(255, 102, 0));
        Dp.setText("0");

        Hp.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Hp.setForeground(new java.awt.Color(255, 102, 0));
        Hp.setText("0");

        Points.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Points.setForeground(new java.awt.Color(255, 102, 0));
        Points.setText("0");

        Level.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Level.setForeground(new java.awt.Color(255, 102, 0));
        Level.setText("0");

        tblBuyItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblBuyItem);

        back.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        back.setForeground(new java.awt.Color(255, 255, 255));
        back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background/back.png"))); // NOI18N
        back.setText("Back");
        back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backMouseClicked(evt);
            }
        });

        lblMyitem.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblMyitem.setForeground(new java.awt.Color(255, 255, 255));
        lblMyitem.setText("My Item");

        Buy.setText("Buy");
        Buy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuyActionPerformed(evt);
            }
        });

        tblMyItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblMyItem);

        lblCoins.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblCoins.setForeground(new java.awt.Color(255, 102, 0));
        lblCoins.setText("Coins");

        Coints.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Coints.setForeground(new java.awt.Color(255, 102, 0));
        Coints.setText("0");

        javax.swing.GroupLayout containerBuyLayout = new javax.swing.GroupLayout(containerBuy);
        containerBuy.setLayout(containerBuyLayout);
        containerBuyLayout.setHorizontalGroup(
            containerBuyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerBuyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(containerBuyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(containerBuyLayout.createSequentialGroup()
                        .addComponent(lblWelcome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(monsterName))
                    .addGroup(containerBuyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, containerBuyLayout.createSequentialGroup()
                            .addGap(21, 21, 21)
                            .addGroup(containerBuyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(back)
                                .addComponent(lblMyitem)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(471, 471, 471)
                            .addComponent(Buy, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, containerBuyLayout.createSequentialGroup()
                            .addComponent(lblImage)
                            .addGap(75, 75, 75)
                            .addGroup(containerBuyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblAP)
                                .addComponent(lblDp)
                                .addComponent(lblHp)
                                .addComponent(lblPoints)
                                .addComponent(lblLevel)
                                .addComponent(lblCoins))
                            .addGap(80, 80, 80)
                            .addGroup(containerBuyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(Coints)
                                .addComponent(Level)
                                .addComponent(Points)
                                .addComponent(Ap)
                                .addComponent(Hp)
                                .addComponent(Dp))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(251, Short.MAX_VALUE))
        );
        containerBuyLayout.setVerticalGroup(
            containerBuyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerBuyLayout.createSequentialGroup()
                .addGroup(containerBuyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(containerBuyLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(containerBuyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblWelcome)
                            .addComponent(monsterName))
                        .addGap(18, 18, 18)
                        .addComponent(lblImage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblMyitem))
                    .addGroup(containerBuyLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(containerBuyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(containerBuyLayout.createSequentialGroup()
                                .addGroup(containerBuyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblAP)
                                    .addComponent(Ap))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(containerBuyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblDp)
                                    .addComponent(Dp))
                                .addGap(18, 18, 18)
                                .addGroup(containerBuyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblHp)
                                    .addComponent(Hp))
                                .addGap(49, 49, 49)
                                .addGroup(containerBuyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblPoints)
                                    .addComponent(Points))
                                .addGap(13, 13, 13)
                                .addGroup(containerBuyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblCoins)
                                    .addComponent(Coints))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(containerBuyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblLevel)
                                    .addComponent(Level)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(70, 70, 70)
                        .addComponent(Buy, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 75, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(95, 95, 95)
                .addComponent(back)
                .addGap(54, 54, 54))
        );

        sound.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background/icons_sound.png"))); // NOI18N
        sound.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                soundMouseClicked(evt);
            }
        });

        exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background/exit.png"))); // NOI18N
        exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(1282, Short.MAX_VALUE)
                .addComponent(sound)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exit)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(containerBuy, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sound)
                    .addComponent(exit))
                .addContainerGap(725, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(containerBuy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void back() {

        this.previousFrame.setVisible(true);
        this.setVisible(false);
        clip.stop();
    }

    private void backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseClicked
        // TODO add your handling code here:
        back();

//        this.previousFrame.getClip().stop();
    }//GEN-LAST:event_backMouseClicked

    public void buyItem() {

//        loadData();
        int row = this.tblBuyItem.getSelectedRow();

        if (row != -1) {
            String dataItem = this.tblBuyItem.getModel().getValueAt(row, 7).toString();
            String typeItem = this.tblBuyItem.getModel().getValueAt(row, 2).toString();
            int idItemBaru = Integer.parseInt(dataItem);
            Item beli = manager.findByIdItem(Integer.parseInt(dataItem));
            int id_item = beli.getId();
            int item_hp = beli.getHp();
            int item_ap = beli.getAp();
            int item_dp = beli.getDp();
            int harga = beli.getPrice();

            int newHp = akunMonster1.getHp();
            int newDp = akunMonster1.getDp();
            int newAp = akunMonster1.getAp();
            int newCoins = akunMonster1.getCoin();
            int id = akunMonster1.getId();
            Item itemBaru = new Item(item_hp, item_ap, item_dp, harga);
            if (itemBaru != null) {

                if (akunMonster1.getCoin() - harga >= 0) {
                    newAp += item_ap;
                    newHp += item_hp;
                    newDp += item_dp;

                    newCoins -= harga;

                    MonsterAccount akunBaru = akunMonster1;

                    akunBaru.setAp(newAp);
                    akunBaru.setDp(newDp);
                    akunBaru.setHp(newHp);
                    akunBaru.setCoin(newCoins);

                    MonsterItemPK PK = new MonsterItemPK(akunBaru.getId(), beli.getId());
                    MonsterItem newItem = new MonsterItem(PK, akunBaru.getMonsterId().getId());

//                    System.out.println("HAHAHS type "+ typeItem);
                    MonsterItem temp = manager.getMonsterItemByPK(PK);
                    if (temp == null) {

//                        MonsterItem sameType = manager.getItemByType(typeItem);
                        ArrayList<MonsterItem> sameType = manager.getAllItemByType(typeItem);
//                        System.out.println("LALALALA"+ sameType.getItem().getKind());
                        if (sameType == null) {
                            manager.createMonsterItem(newItem);
                            manager.updateAkunMonsterBuyItem(akunMonster1);
                        } else {
                            MonsterItem tempItem = null;

                            for (int i = 0; i < sameType.size(); i++) {
                                if (sameType.get(i).getMonsterAccount().getAccountId().equals( akunMonster1.getAccountId())) {
                                    tempItem = sameType.get(i);
//                                    System.out.println("MASUK TIDAK");
                                }
                            }
                            
                            
                            
                            if (tempItem != null) {

                                releaseItem(tempItem.getItem(), akunBaru);

                                manager.delMonsterItem(tempItem.getMonsterItemPK());
                            }

                            manager.createMonsterItem(newItem);

                            manager.updateAkunMonsterBuyItem(akunMonster1);

                        }

                        JOptionPane.showMessageDialog(null, "Harga :" + harga);
//                        JOptionPane.showMessageDialog(null, "Coin : " + newCoins);
                        JOptionPane.showMessageDialog(null, "Sisa: " + newCoins);

                    } else {
                        JOptionPane.showMessageDialog(null, "Already Bought");
                        back();

                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Coin Anda Tidak Mencukupi");
                    back();
                }
            }

        }
    }

    public void releaseItem(Item used, MonsterAccount akunBaru) {
        akunBaru.setAp(akunBaru.getAp() - used.getAp());
        akunBaru.setDp(akunBaru.getDp() - used.getDp());
        akunBaru.setHp(akunBaru.getHp() - used.getHp());
    }


    private void BuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuyActionPerformed
        // TODO add your handling code here:

        buyItem();
        loadDataTableMonster();


    }//GEN-LAST:event_BuyActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        loadDataTableMonster();
//        loadDataTableBuy();
        loadDataTableBuyItem();
        loadDataMonster();
    }//GEN-LAST:event_formWindowActivated
    int suaraControl;
    private void soundMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_soundMouseClicked
        // TODO add your handling code here:
        suaraControl++;

        if (suaraControl % 2 != 0) {
            clip.stop();
            sound.setIcon(new ImageIcon(getClass().getResource("/Images/Background/icon_x.png")));
        } else {
            loadSound();
            sound.setIcon(new ImageIcon(getClass().getResource("/Images/Background/icons_sound.png")));
        }
    }//GEN-LAST:event_soundMouseClicked

    private void exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseClicked
        // TODO add your handling code here:

        this.setVisible(false);
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_exitMouseClicked

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Ap;
    private javax.swing.JButton Buy;
    private javax.swing.JLabel Coints;
    private javax.swing.JLabel Dp;
    private javax.swing.JLabel Hp;
    private javax.swing.JLabel Level;
    private javax.swing.JLabel Points;
    private javax.swing.JLabel back;
    private javax.swing.JPanel containerBuy;
    private javax.swing.JLabel exit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAP;
    private javax.swing.JLabel lblCoins;
    private javax.swing.JLabel lblDp;
    private javax.swing.JLabel lblHp;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblLevel;
    private javax.swing.JLabel lblMyitem;
    private javax.swing.JLabel lblPoints;
    private javax.swing.JLabel lblWelcome;
    private javax.swing.JLabel monsterName;
    private javax.swing.JLabel sound;
    private javax.swing.JTable tblBuyItem;
    private javax.swing.JTable tblMyItem;
    // End of variables declaration//GEN-END:variables
}
