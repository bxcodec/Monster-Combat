/*
 *     Name :  Iman Syahputra Situmorang
 *     NIM  :  11113064
 *     Date :  18/December/2014
 */
package View;

import Controller.DBManager;
import Controller.TimeThread;
import Model.Account;
import Model.MonsterAccount;
import Model.Timer;
import java.applet.Applet;
import java.applet.AudioClip;
import java.awt.AWTException;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.Robot;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/*
 * @author Takiya
 */
public class Battle extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form Battle
     */
    private boolean isRun = false;
    private DBManager manager;
    private Account akunPlayer1;
    private Account akunPlayer2;
    private MonsterAccount akunMonsterAccount1;
    private MonsterAccount akunMonsterAccount2;
    private JFrame previousFrame;
    private Thread threadTime;
    private long waktu;
    private int penampung[] = new int[2];
    private int tampung1 = 0;
    private int tampung2 = 0;
    private TimeThread timer;
    private String Winner;
    private String MonsterWinner;
    private Image image;
    private Image image2;

    public Battle() {
        setUndecorated(true);
        image = new ImageIcon(getClass().getResource("/Images/Background/RealDark.PNG")).getImage();
        image2 = new ImageIcon(getClass().getResource("/Images/Background/dua.jpg")).getImage();

        waktu = 100;
        manager = new DBManager();
        initComponents();
        timer = new TimeThread(true, waktu, this.battleTime);
        threadTime = new Thread(timer);
        Fight.setVisible(true);
        afterFight.setVisible(false);

        this.setFocusable(true);
        this.requestFocus();
        attack1.setFocusable(false);
        attack2.setFocusable(false);
        defense1.setFocusable(false);
        defense2.setFocusable(false);
        logOfMatch.setFocusable(false);
        keyListener();

    }

    public static int randInt(int min, int max) {

        Random rand = new Random();

        int randomNum = rand.nextInt((max - min) + 1) + min;

        return randomNum;
    }

    AudioClip clip = null;

    public void loadSound() {
        int Sound = randInt(0, 10);
//        System.out.println("TEST RANDOM" + Sound);
        URL url;
        if (Sound % 2 == 0) {
            url = getClass().getResource("/Sound/Battle.wav");
        } else {
            url = getClass().getResource("/Sound/Battle1.wav");
        }
        clip = Applet.newAudioClip(url);
//        AudioClip clip2 = Applet.newAudioClip(url);
        clip.play();
        clip.loop();
    }

    public boolean isIsRun() {
        return isRun;
    }

    public void setIsRun(boolean isRun) {
        this.isRun = isRun;
    }

    public void setAkunPlayer1(Account akunPlayer1) {
        this.akunPlayer1 = akunPlayer1;
    }

    public void setAkunPlayer2(Account akunPlayer2) {
        this.akunPlayer2 = akunPlayer2;
    }

    public void setAkunMonsterAccount1(MonsterAccount akunMonsterAccount1) {
        this.akunMonsterAccount1 = akunMonsterAccount1;
    }

    public void setAkunMonsterAccount2(MonsterAccount akunMonsterAccount2) {
        this.akunMonsterAccount2 = akunMonsterAccount2;
    }

    public void setPreviousFrame(JFrame previousFrame) {
        this.previousFrame = previousFrame;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void keyListener() {

        this.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {

            }

            @Override
            public void keyPressed(KeyEvent e) {
                pres.add(e.getKeyCode());

            }

            @Override
            public void keyReleased(KeyEvent e) {
                pres.remove(e.getKeyCode());
            }
        });

    }

    private int doFight1() {
        int ap1 = akunMonsterAccount1.getAp();
        int dp2 = akunMonsterAccount2.getDp();
        if (ap1 > dp2) {
            int delta = ap1 - dp2;
            tampung2 = delta;

        } else {
            tampung2 = 0;
        }

        return tampung2;
    }

    private int doFight2() {
        int ap2 = akunMonsterAccount2.getAp();
        int dp1 = akunMonsterAccount1.getDp();
        if (ap2 > dp1) {
            int delta = ap2 - dp1;
            tampung1 = delta;

        } else {
            tampung1 = 0;
        }

        return tampung1;
    }

    private int[] doFightTogether(MonsterAccount akun1, MonsterAccount akun2) {

        int ap1 = akun1.getAp();
        int ap2 = akun2.getAp();
        penampung[0] = ap1;
        penampung[1] = ap2;

        return penampung;
    }

    private int doFightNoDef1() {

        int ap1 = akunMonsterAccount1.getAp();
        tampung1 = ap1;

        return tampung1;
    }

    private int doFightNoDef2() {

        int ap2 = akunMonsterAccount2.getAp();
        tampung2 = ap2;

        return tampung2;
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Fight = new PanelBackground(image);
        ;
        battleTime = new javax.swing.JLabel();
        nameMonster1 = new javax.swing.JLabel();
        imageMonster1 = new javax.swing.JLabel();
        defense1 = new javax.swing.JButton();
        attack1 = new javax.swing.JButton();
        lblAttack1 = new javax.swing.JLabel();
        lblDefense2 = new javax.swing.JLabel();
        lblDefense1 = new javax.swing.JLabel();
        defense2 = new javax.swing.JButton();
        lblAttack2 = new javax.swing.JLabel();
        attack2 = new javax.swing.JButton();
        imageMonster2 = new javax.swing.JLabel();
        nameMonster2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        panelLog = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logOfMatch = new javax.swing.JTextArea();
        lblLogOfMatch = new javax.swing.JLabel();
        healthBar1 = new javax.swing.JProgressBar();
        healthBar2 = new javax.swing.JProgressBar();
        exit = new javax.swing.JLabel();
        sound = new javax.swing.JLabel();
        afterFight = new PanelBackground(image2);
        ;
        lblCongrats = new javax.swing.JLabel();
        monsterWinner = new javax.swing.JLabel();
        lblWin = new javax.swing.JLabel();
        monsterNamePoint = new javax.swing.JLabel();
        lblGot = new javax.swing.JLabel();
        pointsGot = new javax.swing.JLabel();
        lblIncrease = new javax.swing.JLabel();
        Back = new javax.swing.JLabel();
        exit1 = new javax.swing.JLabel();
        sound1 = new javax.swing.JLabel();
        draw1 = new javax.swing.JLabel();
        draw2 = new javax.swing.JLabel();
        winnerImage = new javax.swing.JLabel();
        lblWin1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        Fight.setPreferredSize(new java.awt.Dimension(1366, 768));

        battleTime.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        battleTime.setForeground(new java.awt.Color(255, 255, 255));
        battleTime.setText("time");

        nameMonster1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        nameMonster1.setForeground(new java.awt.Color(255, 255, 255));
        nameMonster1.setText("Monster Name");

        imageMonster1.setPreferredSize(new java.awt.Dimension(300, 300));

        defense1.setText("D");

        attack1.setText("A");

        lblAttack1.setText("Attack");

        lblDefense2.setText("Defense");

        lblDefense1.setText("Defense");

        defense2.setText("L");

        lblAttack2.setText("Attack");

        attack2.setText("J");

        imageMonster2.setPreferredSize(new java.awt.Dimension(300, 300));

        nameMonster2.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        nameMonster2.setForeground(new java.awt.Color(255, 255, 255));
        nameMonster2.setText("Monster Name");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        jLabel1.setText("VS");

        logOfMatch.setEditable(false);
        logOfMatch.setColumns(20);
        logOfMatch.setRows(5);
        jScrollPane1.setViewportView(logOfMatch);

        lblLogOfMatch.setText("Log of Match");

        javax.swing.GroupLayout panelLogLayout = new javax.swing.GroupLayout(panelLog);
        panelLog.setLayout(panelLogLayout);
        panelLogLayout.setHorizontalGroup(
            panelLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLogOfMatch))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelLogLayout.setVerticalGroup(
            panelLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLogLayout.createSequentialGroup()
                .addGap(0, 18, Short.MAX_VALUE)
                .addComponent(lblLogOfMatch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background/exit.png"))); // NOI18N
        exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitMouseClicked(evt);
            }
        });

        sound.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background/icons_sound.png"))); // NOI18N
        sound.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                soundMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout FightLayout = new javax.swing.GroupLayout(Fight);
        Fight.setLayout(FightLayout);
        FightLayout.setHorizontalGroup(
            FightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FightLayout.createSequentialGroup()
                .addGroup(FightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FightLayout.createSequentialGroup()
                        .addGap(206, 206, 206)
                        .addComponent(nameMonster1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(FightLayout.createSequentialGroup()
                        .addGap(176, 176, 176)
                        .addGroup(FightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(FightLayout.createSequentialGroup()
                                .addGroup(FightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(FightLayout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addComponent(lblAttack1)
                                        .addGap(168, 168, 168)
                                        .addComponent(lblDefense2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 145, Short.MAX_VALUE))
                                    .addGroup(FightLayout.createSequentialGroup()
                                        .addComponent(healthBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(82, 82, 82)))
                                .addComponent(panelLog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(56, 56, 56))
                            .addGroup(FightLayout.createSequentialGroup()
                                .addGroup(FightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(FightLayout.createSequentialGroup()
                                        .addComponent(attack1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(72, 72, 72)
                                        .addComponent(defense1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(imageMonster1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGroup(FightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(FightLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(nameMonster2))
                    .addGroup(FightLayout.createSequentialGroup()
                        .addComponent(attack2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addComponent(defense2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(imageMonster2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(FightLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(lblAttack2)
                        .addGap(168, 168, 168)
                        .addComponent(lblDefense1))
                    .addComponent(healthBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(124, 124, 124))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FightLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(FightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(FightLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(634, 634, 634))
                    .addGroup(FightLayout.createSequentialGroup()
                        .addComponent(battleTime)
                        .addGap(564, 564, 564)
                        .addComponent(sound)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(exit))))
        );
        FightLayout.setVerticalGroup(
            FightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FightLayout.createSequentialGroup()
                .addGroup(FightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FightLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(battleTime))
                    .addGroup(FightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(sound)
                        .addComponent(exit)))
                .addGap(43, 43, 43)
                .addGroup(FightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(FightLayout.createSequentialGroup()
                        .addComponent(nameMonster2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imageMonster2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(healthBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addGroup(FightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(defense2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(attack2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(FightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAttack2)
                            .addComponent(lblDefense1)))
                    .addGroup(FightLayout.createSequentialGroup()
                        .addComponent(nameMonster1)
                        .addGap(18, 18, 18)
                        .addGroup(FightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(FightLayout.createSequentialGroup()
                                .addComponent(imageMonster1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(healthBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addGroup(FightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(defense1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(attack1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(11, 11, 11)
                                .addGroup(FightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblAttack1)
                                    .addComponent(lblDefense2)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FightLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(125, 125, 125)
                                .addComponent(panelLog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)))))
                .addContainerGap(97, Short.MAX_VALUE))
        );

        afterFight.setPreferredSize(new java.awt.Dimension(1366, 768));

        lblCongrats.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblCongrats.setText("Congratulations");

        monsterWinner.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        monsterWinner.setText("Monster Name");

        lblWin.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblWin.setText("Win This Match");

        monsterNamePoint.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        monsterNamePoint.setText("MonsterName");

        lblGot.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblGot.setText("got");

        pointsGot.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        pointsGot.setForeground(new java.awt.Color(204, 0, 0));
        pointsGot.setText("0");

        lblIncrease.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblIncrease.setText("Points , You may update your level by increase your monster points");

        Back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background/Back1.png"))); // NOI18N
        Back.setText("Back");
        Back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BackMouseClicked(evt);
            }
        });

        exit1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background/exit.png"))); // NOI18N
        exit1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exit1MouseClicked(evt);
            }
        });

        sound1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Background/icons_sound.png"))); // NOI18N
        sound1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sound1MouseClicked(evt);
            }
        });

        draw1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Monster/Bonbon.png"))); // NOI18N

        draw2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Monster/Bonbon.png"))); // NOI18N

        winnerImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Monster/Bonbon.png"))); // NOI18N

        lblWin1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblWin1.setText("Player");

        javax.swing.GroupLayout afterFightLayout = new javax.swing.GroupLayout(afterFight);
        afterFight.setLayout(afterFightLayout);
        afterFightLayout.setHorizontalGroup(
            afterFightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, afterFightLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(sound1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exit1))
            .addGroup(afterFightLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(draw1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 155, Short.MAX_VALUE)
                .addComponent(winnerImage)
                .addGap(170, 170, 170)
                .addComponent(draw2)
                .addGap(79, 79, 79))
            .addGroup(afterFightLayout.createSequentialGroup()
                .addGroup(afterFightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(afterFightLayout.createSequentialGroup()
                        .addGap(402, 402, 402)
                        .addComponent(lblWin1)
                        .addGap(18, 18, 18)
                        .addGroup(afterFightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(afterFightLayout.createSequentialGroup()
                                .addGap(92, 92, 92)
                                .addComponent(lblCongrats))
                            .addGroup(afterFightLayout.createSequentialGroup()
                                .addComponent(monsterWinner)
                                .addGap(18, 18, 18)
                                .addComponent(lblWin))))
                    .addGroup(afterFightLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(Back))
                    .addGroup(afterFightLayout.createSequentialGroup()
                        .addGap(249, 249, 249)
                        .addComponent(monsterNamePoint)
                        .addGap(27, 27, 27)
                        .addComponent(lblGot)
                        .addGap(18, 18, 18)
                        .addComponent(pointsGot)
                        .addGap(18, 18, 18)
                        .addComponent(lblIncrease)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        afterFightLayout.setVerticalGroup(
            afterFightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(afterFightLayout.createSequentialGroup()
                .addGroup(afterFightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sound1)
                    .addComponent(exit1))
                .addGap(7, 7, 7)
                .addComponent(lblCongrats)
                .addGap(18, 18, 18)
                .addGroup(afterFightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(monsterWinner)
                    .addComponent(lblWin)
                    .addComponent(lblWin1))
                .addGap(67, 67, 67)
                .addGroup(afterFightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(afterFightLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(afterFightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(draw1)
                            .addComponent(winnerImage)))
                    .addComponent(draw2))
                .addGap(43, 43, 43)
                .addGroup(afterFightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(monsterNamePoint)
                    .addComponent(lblGot)
                    .addComponent(pointsGot)
                    .addComponent(lblIncrease))
                .addGap(78, 78, 78)
                .addComponent(Back)
                .addGap(36, 36, 36))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Fight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(afterFight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Fight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(afterFight, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
//        loadData();
//        loadSound();
        if (clip == null) {
            loadSound();

        } else {
            clip.stop();
            loadSound();
        }

        if (!timer.isIsRun()) {
            try {
                threadTime.stop();

            } catch (Exception io) {
            }
//            JOptionPane.showMessageDialog(null, "Sudah Selesai");
        } else {
            try {
                threadTime.start();

            } catch (Exception io) {
            }
        }


    }//GEN-LAST:event_formWindowActivated
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed

    }//GEN-LAST:event_formKeyPressed

    private void BackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackMouseClicked
        // TODO add your handling code here:
        Dashboard dasboard = new Dashboard();
        dasboard.setAkun1(akunPlayer1);
        dasboard.setAkun2(akunPlayer2);
        dasboard.setVisible(true);
        afterFight.setVisible(false);
        Fight.setVisible(false);
        this.setVisible(false);
        clip.stop();
    }//GEN-LAST:event_BackMouseClicked

    private void exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseClicked
        // TODO add your handling code here:

        this.setVisible(false);
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_exitMouseClicked
    int suaraControl = 0;
    private void soundMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_soundMouseClicked
        // TODO add your handling code here:
        suaraControl++;

        if (suaraControl % 2 != 0) {
            clip.stop();
            sound.setIcon(new ImageIcon(getClass().getResource("/Images/Background/icon_x.png")));
        } else {
            loadSound();
            sound.setIcon(new ImageIcon(getClass().getResource("/Images/Background/icons_sound.png")));
        }
    }//GEN-LAST:event_soundMouseClicked

    private void exit1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exit1MouseClicked
        // TODO add your handling code here:

        this.setVisible(false);
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_exit1MouseClicked

    private void sound1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sound1MouseClicked
        // TODO add your handling code here:
        suaraControl++;

        if (suaraControl % 2 != 0) {
            clip.stop();
            sound.setIcon(new ImageIcon(getClass().getResource("/Images/Background/icon_x.png")));
        } else {
            loadSound();
            sound.setIcon(new ImageIcon(getClass().getResource("/Images/Background/icons_sound.png")));
        }
    }//GEN-LAST:event_sound1MouseClicked

    public void loadData() {

        akunMonsterAccount1 = manager.getAkunMonsterbyUser(akunPlayer1.getId());
        akunMonsterAccount2 = manager.getAkunMonsterbyUser(akunPlayer2.getId());
        nameMonster1.setText(akunMonsterAccount1.getAccountId().getUsername());
        nameMonster2.setText(akunMonsterAccount2.getAccountId().getUsername());
        imageMonster1.setIcon(new ImageIcon(getClass().getResource("/Images/Monster/" + akunMonsterAccount1.getMonsterId().getAvatarUrl())));
        imageMonster2.setIcon(new ImageIcon(getClass().getResource("/Images/Monster/" + akunMonsterAccount2.getMonsterId().getAvatarUrl())));
        nama1 = akunMonsterAccount1.getName();
        nama2 = akunMonsterAccount2.getName();

    }

    public void loadHealth() {

        healthBar1.setMaximum(akunMonsterAccount1.getHp());
        healthBar2.setMaximum(akunMonsterAccount2.getHp());
        healthBar1.setValue(akunMonsterAccount1.getHp());
        healthBar2.setValue(akunMonsterAccount2.getHp());
        penampung[0] = akunMonsterAccount1.getHp();
        penampung[1] = akunMonsterAccount2.getHp();
        tampung1 = akunMonsterAccount1.getHp();
        tampung2 = akunMonsterAccount2.getHp();

    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Back;
    private javax.swing.JPanel Fight;
    private javax.swing.JPanel afterFight;
    private javax.swing.JButton attack1;
    private javax.swing.JButton attack2;
    private javax.swing.JLabel battleTime;
    private javax.swing.JButton defense1;
    private javax.swing.JButton defense2;
    private javax.swing.JLabel draw1;
    private javax.swing.JLabel draw2;
    private javax.swing.JLabel exit;
    private javax.swing.JLabel exit1;
    private javax.swing.JProgressBar healthBar1;
    private javax.swing.JProgressBar healthBar2;
    private javax.swing.JLabel imageMonster1;
    private javax.swing.JLabel imageMonster2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAttack1;
    private javax.swing.JLabel lblAttack2;
    private javax.swing.JLabel lblCongrats;
    private javax.swing.JLabel lblDefense1;
    private javax.swing.JLabel lblDefense2;
    private javax.swing.JLabel lblGot;
    private javax.swing.JLabel lblIncrease;
    private javax.swing.JLabel lblLogOfMatch;
    private javax.swing.JLabel lblWin;
    private javax.swing.JLabel lblWin1;
    private javax.swing.JTextArea logOfMatch;
    private javax.swing.JLabel monsterNamePoint;
    private javax.swing.JLabel monsterWinner;
    private javax.swing.JLabel nameMonster1;
    private javax.swing.JLabel nameMonster2;
    private javax.swing.JPanel panelLog;
    private javax.swing.JLabel pointsGot;
    private javax.swing.JLabel sound;
    private javax.swing.JLabel sound1;
    private javax.swing.JLabel winnerImage;
    // End of variables declaration//GEN-END:variables

    public void winAttacked() {

        if (healthBar2.getValue() <= 0) {
            winPoint = 5;
            coint = winPoint * 100;
            int pointLos = 1;
            int cointLos = pointLos * 100;

            MonsterAccount winner = akunMonsterAccount1;
            MonsterAccount losser = akunMonsterAccount2;
            winner.setWinPoint(winner.getWinPoint() + winPoint);
            winner.setCoin(coint + winner.getCoin());

            losser.setWinPoint(losser.getWinPoint() + pointLos);
            losser.setCoin(cointLos + losser.getCoin());
            manager.updateAkunMonster(winner);
            manager.updateAkunMonster(losser);

            Winner = akunMonsterAccount1.getAccountId().getUsername();
            MonsterWinner = akunMonsterAccount1.getName();
            winnerImage.setIcon(new ImageIcon(getClass().getResource("/Images/Monster/" + akunMonsterAccount1.getMonsterId().getAvatarUrl())));
            draw1.setIcon(null);
            draw2.setIcon(null);
        } else {
            winPoint = 5;
            coint = winPoint * 100;
            int pointLos = 1;
            int cointLos = pointLos * 100;

            MonsterAccount winner = akunMonsterAccount2;
            MonsterAccount losser = akunMonsterAccount1;
            winner.setWinPoint(winner.getWinPoint() + winPoint);
            winner.setCoin(coint + winner.getCoin());

            losser.setWinPoint(losser.getWinPoint() + pointLos);
            losser.setCoin(cointLos + losser.getCoin());
            manager.updateAkunMonster(winner);
            manager.updateAkunMonster(losser);

            Winner = akunMonsterAccount2.getAccountId().getUsername();
            MonsterWinner = akunMonsterAccount2.getName();

            winnerImage.setIcon(new ImageIcon(getClass().getResource("/Images/Monster/" + akunMonsterAccount2.getMonsterId().getAvatarUrl())));
            draw1.setIcon(null);
            draw2.setIcon(null);
        }

        Fight.setVisible(false);
        afterFight.setVisible(true);

        clip.stop();

        URL url;
        url = Login.class.getResource("/Sound/winner.wav");

        clip = Applet.newAudioClip(url);
//        AudioClip clip2 = Applet.newAudioClip(url);
        clip.play();
        clip.loop();

        if (!Winner.equals("Draw")) {
            monsterWinner.setText(Winner);
            monsterNamePoint.setText(MonsterWinner);
            pointsGot.setText((new Integer(winPoint).toString()));

            isRun = false;
            timer.setIsRun(false);

        }

    }

    public void winByTime() {

        double darah1 = healthBar1.getValue();
        double darah2 = healthBar2.getValue();
        double max1 = healthBar1.getMaximum();
        double max2 = healthBar2.getMaximum();

        double persentase1 = darah1 / max1 * 100;
        double persentase2 = darah2 / max2 * 100;
        if (persentase1 > persentase2) {
            winPoint = 5;
            coint = winPoint * 100;
            int pointLos = 1;
            int cointLos = pointLos * 100;

            MonsterAccount winner = akunMonsterAccount1;
            MonsterAccount losser = akunMonsterAccount2;
            winner.setWinPoint(winner.getWinPoint() + winPoint);
            winner.setCoin(coint + winner.getCoin());

            losser.setWinPoint(losser.getWinPoint() + pointLos);
            losser.setCoin(cointLos + losser.getCoin());
            manager.updateAkunMonster(winner);
            manager.updateAkunMonster(losser);

            Winner = akunMonsterAccount1.getAccountId().getUsername();
            MonsterWinner = akunMonsterAccount1.getName();

            winnerImage.setIcon(new ImageIcon(getClass().getResource("/Images/Monster/" + akunMonsterAccount1.getMonsterId().getAvatarUrl())));
            draw1.setIcon(null);
            draw2.setIcon(null);
        } else if (persentase1 < persentase2) {
            winPoint = 5;
            coint = winPoint * 100;
            int pointLos = 1;
            int cointLos = pointLos * 100;

            MonsterAccount winner = akunMonsterAccount2;
            MonsterAccount losser = akunMonsterAccount1;
            winner.setWinPoint(winner.getWinPoint() + winPoint);
            winner.setCoin(coint + winner.getCoin());

            losser.setWinPoint(losser.getWinPoint() + pointLos);
            losser.setCoin(cointLos + losser.getCoin());
            manager.updateAkunMonster(winner);
            manager.updateAkunMonster(losser);
            Winner = akunMonsterAccount2.getAccountId().getUsername();
            MonsterWinner = akunMonsterAccount2.getName();

            winnerImage.setIcon(new ImageIcon(getClass().getResource("/Images/Monster/" + akunMonsterAccount2.getMonsterId().getAvatarUrl())));
            draw1.setIcon(null);
            draw2.setIcon(null);
        } else {
            winPoint = 2;
            coint = winPoint * 100;
            MonsterAccount winnerSatu = akunMonsterAccount1;
            winnerSatu.setWinPoint(winnerSatu.getWinPoint() + winPoint);
            winnerSatu.setCoin(winnerSatu.getCoin() + coint);

            manager.updateAkunMonster(winnerSatu);

            MonsterAccount winnerDua = akunMonsterAccount2;
            winnerDua.setWinPoint(winnerDua.getWinPoint() + winPoint);
            winnerDua.setCoin(winnerDua.getCoin() + coint);

            manager.updateAkunMonster(winnerDua);

            Winner = "Draw";
        }

        clip.stop();

        URL url;
        url = Login.class.getResource("/Sound/winner.wav");

        clip = Applet.newAudioClip(url);

        clip.play();
        clip.loop();

        Fight.setVisible(false);
        afterFight.setVisible(true);

        if (!Winner.equals("Draw")) {
            monsterWinner.setText(Winner);
            monsterNamePoint.setText(MonsterWinner);
            pointsGot.setText((new Integer(winPoint).toString()));

        } else {
            lblCongrats.setText("DRAW!!!!");
            monsterWinner.setText("Match ");
            lblWin.setText("Draw No one Win");
            monsterNamePoint.setText("Both Player ");
            pointsGot.setText((new Integer(winPoint).toString()));
            draw1.setIcon(new ImageIcon(getClass().getResource("/Images/Monster/" + akunMonsterAccount1.getMonsterId().getAvatarUrl())));
            draw2.setIcon(new ImageIcon(getClass().getResource("/Images/Monster/" + akunMonsterAccount2.getMonsterId().getAvatarUrl())));
            winnerImage.setIcon(null);
        }

        isRun = false;
    }

    Set<Integer> pres = new HashSet<Integer>();
    int winPoint = 0;
    int coint = 0;
    String nama1;
    String nama2;

    URL[] urlSound = new URL[6];

    AudioClip[] battleSound = new AudioClip[6];

    public void loadBattleEffect() {

        urlSound[0] = getClass().getResource("/Sound/punch1.wav");
        urlSound[1] = getClass().getResource("/Sound/punch2.wav");
        urlSound[2] = getClass().getResource("/Sound/punch3.wav");
        urlSound[3] = getClass().getResource("/Sound/punch4.wav");
        urlSound[4] = getClass().getResource("/Sound/punch5.wav");
        urlSound[5] = getClass().getResource("/Sound/punch6.wav");

        for (int i = 0; i < 6; i++) {

            battleSound[i] = Applet.newAudioClip(urlSound[i]);
        }

    }

    @Override
    public void run() {
        loadData();
        loadHealth();
        loadBattleEffect();
        while (isRun) {
            try {
                Thread.sleep(100);
            } catch (InterruptedException ex) {
                Logger.getLogger(Battle.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (pres.contains((int) 'A') && pres.contains((int) 'L')) {
                for (int i = 0; i < 6; i++) {
                    battleSound[i].stop();
                }
                battleSound[randInt(0, 4)].play();

                int hp = doFight1();
                healthBar2.setValue(healthBar2.getValue() - hp);
                logOfMatch.append(nama1 + " Attack " + nama2 + " Defense \n");
            } else if (pres.contains((int) 'D') && pres.contains((int) 'J')) {
                for (int i = 0; i < 6; i++) {
                    battleSound[i].stop();
                }

                battleSound[randInt(0, 4)].play();
                int hp = doFight2();
                healthBar1.setValue(healthBar1.getValue() - hp);
                logOfMatch.append(nama1 + " Defense " + nama2 + " Attack \n");
            } else if (pres.contains((int) 'A') && pres.contains((int) 'J')) {
                for (int i = 0; i < 6; i++) {
                    battleSound[i].stop();
                }

                battleSound[5].play();

                int hp[] = doFightTogether(akunMonsterAccount1, akunMonsterAccount2);
                healthBar1.setValue(healthBar1.getValue() - hp[0]);
                healthBar2.setValue(healthBar2.getValue() - hp[1]);
                logOfMatch.append(nama1 + " Attack " + nama2 + " Attack \n");
            } else if (pres.contains((int) 'D') && pres.contains((int) 'L')) {
                for (int i = 0; i < 6; i++) {
                    battleSound[i].stop();
                }
                
                
                logOfMatch.append(nama1 + " Defense " + nama2 + " Defense \n");
                //DO NOTHING
            } else if (pres.contains((int) 'A')) {
                for (int i = 0; i < 6; i++) {
                    battleSound[i].stop();
                }
                
                
                battleSound[randInt(0, 4)].play();
                
                int hp = doFightNoDef1();
                healthBar2.setValue(healthBar2.getValue() - hp);
                logOfMatch.append(nama1 + " Attack " + nama2 + " Do Nothing \n");

            } else if (pres.contains((int) 'J')) {
                for (int i = 0; i < 6; i++) {
                    battleSound[i].stop();
                }
                
                battleSound[randInt(0, 4)].play();
                
                int hp = doFightNoDef2();
                healthBar1.setValue(healthBar1.getValue() - hp);
                logOfMatch.append(nama1 + " Do Nothing " + nama2 + "Attack \n");
            } else if (pres.contains((int) 'D')) {
                for (int i = 0; i < 6; i++) {
                    battleSound[i].stop();
                }
                logOfMatch.append(nama1 + " Defense " + nama2 + " Do Nothing \n");
            } else if (pres.contains((int) 'L')) {
                for (int i = 0; i < 6; i++) {
                    battleSound[i].stop();
                }
                logOfMatch.append(nama1 + " Do Nothing " + nama2 + " Defense \n");
            }

            if (!timer.isIsRun()) {
                winByTime();
            } else if (healthBar1.getValue() <= 0 || healthBar2.getValue() <= 0) {

                winAttacked();
            }

        }
    }
}
